/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow strict
 */

import type { PluginPass } from '../../flow_modules/@babel/core';
import type { NodePath } from '../../flow_modules/@babel/traverse';
import type {
  CompiledNamespaces,
  StyleXOptions as RuntimeOptions,
} from '@stylexjs/shared';
export type ImportPathResolution =
  | false
  | ['themeNameRef' | 'filePath', string];

type ModuleResolution =
  | {
      type: 'commonJS',
      rootDir: string,
      themeFileExtension?: string,
    }
  | {
      type: 'haste',
      themeFileExtension?: string,
    }
  | {
      type: 'experimental_crossFileParsing',
      rootDir: string,
      themeFileExtension?: string,
    };

export type StyleXOptions = {
  ...RuntimeOptions,
  importSources: Array<string>,
  treeshakeCompensation?: boolean,
  genConditionalClasses: boolean,
  unstable_moduleResolution: void | ModuleResolution,
  ...
};

declare export default class StateManager {
  +_state: PluginPass;
  +importPaths: Set<string>;
  +stylexImport: Set<string>;
  +stylexPropsImport: Set<string>;
  +stylexCreateImport: Set<string>;
  +stylexIncludeImport: Set<string>;
  +stylexFirstThatWorksImport: Set<string>;
  +stylexKeyframesImport: Set<string>;
  +stylexDefineVarsImport: Set<string>;
  +stylexCreateThemeImport: Set<string>;
  +stylexTypesImport: Set<string>;
  +styleMap: Map<string, CompiledNamespaces>;
  +styleVars: Map<string, NodePath<>>;
  +styleVarsToKeep: Set<[string, null | string]>;
  inStyleXCreate: boolean;
  constructor(state: PluginPass): void;
  get options(): StyleXOptions;
  get importPathString(): string;
  get canReferenceTheme(): boolean;
  get metadata(): { [key: string]: any };
  get runtimeInjection(): boolean;
  get isDev(): boolean;
  get isTest(): boolean;
  get filename(): string | void;
  get cssVars(): any;
  get treeshakeCompensation(): boolean;
  get fileNameForHashing(): null | string;
  importPathResolver(importPath: string): ImportPathResolution;
  addStyle(style: [string, { ltr: string, rtl?: string | null }, number]): void;
  markComposedNamespace(memberExpression: [string, null | string]): void;
}
