/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *
 */

import { type SpreadOptions } from './SpreadOptions';
import type { StyleX$CreateTheme, StyleX$DefineVars } from '../StyleXTypes';
/**
 * The create method shim should do initial transforms like
 * renaming/expanding/validating properties, essentially all the steps
 * which can be done at initialization-time (could potentially be done at
 * compile-time in the future).
 */
export declare function create<S extends { [$$Key$$: string]: {} }>(
  styles: S,
): { [$$Key$$: string]: {} };
export declare const firstThatWorks: <T extends string | number>(
  ...values: ReadonlyArray<T>
) => T;
type Keyframes = {
  readonly [key: string]: { readonly [k: string]: string | number };
};
export declare function keyframes(k: Keyframes): Keyframes;
/**
 * The spread method shim
 */

export declare function props(
  this: SpreadOptions,
  ...style: ReadonlyArray<null | undefined | { [key: string]: unknown }>
): { [$$Key$$: string]: {} };
export declare const __customProperties: { [$$Key$$: string]: unknown };
export declare const defineVars: StyleX$DefineVars;
export declare const createTheme: any;
export type IStyleX = Readonly<{
  create: typeof create;
  firstThatWorks: typeof firstThatWorks;
  keyframes: typeof keyframes;
  props: typeof props;
  defineVars: StyleX$DefineVars;
  createTheme: StyleX$CreateTheme;
  __customProperties?: { [$$Key$$: string]: unknown };
}>;
export declare const stylex: IStyleX;
declare const $$EXPORT_DEFAULT_DECLARATION$$: IStyleX;
export default $$EXPORT_DEFAULT_DECLARATION$$;
